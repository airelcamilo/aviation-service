// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"aviation-service/internal/dto"
	"aviation-service/internal/repository"
	"context"
	"sync"
)

// Ensure, that IAirportRepositoryMock does implement repository.IAirportRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.IAirportRepository = &IAirportRepositoryMock{}

// IAirportRepositoryMock is a mock implementation of repository.IAirportRepository.
//
//	func TestSomethingThatUsesIAirportRepository(t *testing.T) {
//
//		// make and configure a mocked repository.IAirportRepository
//		mockedIAirportRepository := &IAirportRepositoryMock{
//			DeleteFunc: func(ctx context.Context, id int) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func(ctx context.Context, limit int, offset int) ([]dto.Airport, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllPendingFunc: func(ctx context.Context) ([]dto.Airport, error) {
//				panic("mock out the GetAllPending method")
//			},
//			GetByICAOOrFacilityNameFunc: func(ctx context.Context, icao string, facilityName string, limit int, offset int) ([]dto.Airport, error) {
//				panic("mock out the GetByICAOOrFacilityName method")
//			},
//			GetByIdFunc: func(ctx context.Context, id int) (*dto.Airport, error) {
//				panic("mock out the GetById method")
//			},
//			InsertFunc: func(ctx context.Context, airport *dto.Airport) (*dto.Airport, error) {
//				panic("mock out the Insert method")
//			},
//			UpdateByICAOFunc: func(ctx context.Context, airports []dto.Airport) error {
//				panic("mock out the UpdateByICAO method")
//			},
//			UpdateByIdFunc: func(ctx context.Context, airport *dto.Airport) (*dto.Airport, error) {
//				panic("mock out the UpdateById method")
//			},
//		}
//
//		// use mockedIAirportRepository in code that requires repository.IAirportRepository
//		// and then make assertions.
//
//	}
type IAirportRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id int) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, limit int, offset int) ([]dto.Airport, error)

	// GetAllPendingFunc mocks the GetAllPending method.
	GetAllPendingFunc func(ctx context.Context) ([]dto.Airport, error)

	// GetByICAOOrFacilityNameFunc mocks the GetByICAOOrFacilityName method.
	GetByICAOOrFacilityNameFunc func(ctx context.Context, icao string, facilityName string, limit int, offset int) ([]dto.Airport, error)

	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(ctx context.Context, id int) (*dto.Airport, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(ctx context.Context, airport *dto.Airport) (*dto.Airport, error)

	// UpdateByICAOFunc mocks the UpdateByICAO method.
	UpdateByICAOFunc func(ctx context.Context, airports []dto.Airport) error

	// UpdateByIdFunc mocks the UpdateById method.
	UpdateByIdFunc func(ctx context.Context, airport *dto.Airport) (*dto.Airport, error)

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// GetAllPending holds details about calls to the GetAllPending method.
		GetAllPending []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByICAOOrFacilityName holds details about calls to the GetByICAOOrFacilityName method.
		GetByICAOOrFacilityName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Icao is the icao argument value.
			Icao string
			// FacilityName is the facilityName argument value.
			FacilityName string
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Airport is the airport argument value.
			Airport *dto.Airport
		}
		// UpdateByICAO holds details about calls to the UpdateByICAO method.
		UpdateByICAO []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Airports is the airports argument value.
			Airports []dto.Airport
		}
		// UpdateById holds details about calls to the UpdateById method.
		UpdateById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Airport is the airport argument value.
			Airport *dto.Airport
		}
	}
	lockDelete                  sync.RWMutex
	lockGetAll                  sync.RWMutex
	lockGetAllPending           sync.RWMutex
	lockGetByICAOOrFacilityName sync.RWMutex
	lockGetById                 sync.RWMutex
	lockInsert                  sync.RWMutex
	lockUpdateByICAO            sync.RWMutex
	lockUpdateById              sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *IAirportRepositoryMock) Delete(ctx context.Context, id int) error {
	if mock.DeleteFunc == nil {
		panic("IAirportRepositoryMock.DeleteFunc: method is nil but IAirportRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedIAirportRepository.DeleteCalls())
func (mock *IAirportRepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *IAirportRepositoryMock) GetAll(ctx context.Context, limit int, offset int) ([]dto.Airport, error) {
	if mock.GetAllFunc == nil {
		panic("IAirportRepositoryMock.GetAllFunc: method is nil but IAirportRepository.GetAll was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx, limit, offset)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedIAirportRepository.GetAllCalls())
func (mock *IAirportRepositoryMock) GetAllCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllPending calls GetAllPendingFunc.
func (mock *IAirportRepositoryMock) GetAllPending(ctx context.Context) ([]dto.Airport, error) {
	if mock.GetAllPendingFunc == nil {
		panic("IAirportRepositoryMock.GetAllPendingFunc: method is nil but IAirportRepository.GetAllPending was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllPending.Lock()
	mock.calls.GetAllPending = append(mock.calls.GetAllPending, callInfo)
	mock.lockGetAllPending.Unlock()
	return mock.GetAllPendingFunc(ctx)
}

// GetAllPendingCalls gets all the calls that were made to GetAllPending.
// Check the length with:
//
//	len(mockedIAirportRepository.GetAllPendingCalls())
func (mock *IAirportRepositoryMock) GetAllPendingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllPending.RLock()
	calls = mock.calls.GetAllPending
	mock.lockGetAllPending.RUnlock()
	return calls
}

// GetByICAOOrFacilityName calls GetByICAOOrFacilityNameFunc.
func (mock *IAirportRepositoryMock) GetByICAOOrFacilityName(ctx context.Context, icao string, facilityName string, limit int, offset int) ([]dto.Airport, error) {
	if mock.GetByICAOOrFacilityNameFunc == nil {
		panic("IAirportRepositoryMock.GetByICAOOrFacilityNameFunc: method is nil but IAirportRepository.GetByICAOOrFacilityName was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Icao         string
		FacilityName string
		Limit        int
		Offset       int
	}{
		Ctx:          ctx,
		Icao:         icao,
		FacilityName: facilityName,
		Limit:        limit,
		Offset:       offset,
	}
	mock.lockGetByICAOOrFacilityName.Lock()
	mock.calls.GetByICAOOrFacilityName = append(mock.calls.GetByICAOOrFacilityName, callInfo)
	mock.lockGetByICAOOrFacilityName.Unlock()
	return mock.GetByICAOOrFacilityNameFunc(ctx, icao, facilityName, limit, offset)
}

// GetByICAOOrFacilityNameCalls gets all the calls that were made to GetByICAOOrFacilityName.
// Check the length with:
//
//	len(mockedIAirportRepository.GetByICAOOrFacilityNameCalls())
func (mock *IAirportRepositoryMock) GetByICAOOrFacilityNameCalls() []struct {
	Ctx          context.Context
	Icao         string
	FacilityName string
	Limit        int
	Offset       int
} {
	var calls []struct {
		Ctx          context.Context
		Icao         string
		FacilityName string
		Limit        int
		Offset       int
	}
	mock.lockGetByICAOOrFacilityName.RLock()
	calls = mock.calls.GetByICAOOrFacilityName
	mock.lockGetByICAOOrFacilityName.RUnlock()
	return calls
}

// GetById calls GetByIdFunc.
func (mock *IAirportRepositoryMock) GetById(ctx context.Context, id int) (*dto.Airport, error) {
	if mock.GetByIdFunc == nil {
		panic("IAirportRepositoryMock.GetByIdFunc: method is nil but IAirportRepository.GetById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	return mock.GetByIdFunc(ctx, id)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//
//	len(mockedIAirportRepository.GetByIdCalls())
func (mock *IAirportRepositoryMock) GetByIdCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *IAirportRepositoryMock) Insert(ctx context.Context, airport *dto.Airport) (*dto.Airport, error) {
	if mock.InsertFunc == nil {
		panic("IAirportRepositoryMock.InsertFunc: method is nil but IAirportRepository.Insert was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Airport *dto.Airport
	}{
		Ctx:     ctx,
		Airport: airport,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(ctx, airport)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedIAirportRepository.InsertCalls())
func (mock *IAirportRepositoryMock) InsertCalls() []struct {
	Ctx     context.Context
	Airport *dto.Airport
} {
	var calls []struct {
		Ctx     context.Context
		Airport *dto.Airport
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}

// UpdateByICAO calls UpdateByICAOFunc.
func (mock *IAirportRepositoryMock) UpdateByICAO(ctx context.Context, airports []dto.Airport) error {
	if mock.UpdateByICAOFunc == nil {
		panic("IAirportRepositoryMock.UpdateByICAOFunc: method is nil but IAirportRepository.UpdateByICAO was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Airports []dto.Airport
	}{
		Ctx:      ctx,
		Airports: airports,
	}
	mock.lockUpdateByICAO.Lock()
	mock.calls.UpdateByICAO = append(mock.calls.UpdateByICAO, callInfo)
	mock.lockUpdateByICAO.Unlock()
	return mock.UpdateByICAOFunc(ctx, airports)
}

// UpdateByICAOCalls gets all the calls that were made to UpdateByICAO.
// Check the length with:
//
//	len(mockedIAirportRepository.UpdateByICAOCalls())
func (mock *IAirportRepositoryMock) UpdateByICAOCalls() []struct {
	Ctx      context.Context
	Airports []dto.Airport
} {
	var calls []struct {
		Ctx      context.Context
		Airports []dto.Airport
	}
	mock.lockUpdateByICAO.RLock()
	calls = mock.calls.UpdateByICAO
	mock.lockUpdateByICAO.RUnlock()
	return calls
}

// UpdateById calls UpdateByIdFunc.
func (mock *IAirportRepositoryMock) UpdateById(ctx context.Context, airport *dto.Airport) (*dto.Airport, error) {
	if mock.UpdateByIdFunc == nil {
		panic("IAirportRepositoryMock.UpdateByIdFunc: method is nil but IAirportRepository.UpdateById was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Airport *dto.Airport
	}{
		Ctx:     ctx,
		Airport: airport,
	}
	mock.lockUpdateById.Lock()
	mock.calls.UpdateById = append(mock.calls.UpdateById, callInfo)
	mock.lockUpdateById.Unlock()
	return mock.UpdateByIdFunc(ctx, airport)
}

// UpdateByIdCalls gets all the calls that were made to UpdateById.
// Check the length with:
//
//	len(mockedIAirportRepository.UpdateByIdCalls())
func (mock *IAirportRepositoryMock) UpdateByIdCalls() []struct {
	Ctx     context.Context
	Airport *dto.Airport
} {
	var calls []struct {
		Ctx     context.Context
		Airport *dto.Airport
	}
	mock.lockUpdateById.RLock()
	calls = mock.calls.UpdateById
	mock.lockUpdateById.RUnlock()
	return calls
}
