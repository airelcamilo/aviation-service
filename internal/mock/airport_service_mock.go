// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"aviation-service/internal/dto"
	"aviation-service/internal/service"
	"context"
	"sync"
)

// Ensure, that IAirportServiceMock does implement service.IAirportService.
// If this is not the case, regenerate this file with moq.
var _ service.IAirportService = &IAirportServiceMock{}

// IAirportServiceMock is a mock implementation of service.IAirportService.
//
//	func TestSomethingThatUsesIAirportService(t *testing.T) {
//
//		// make and configure a mocked service.IAirportService
//		mockedIAirportService := &IAirportServiceMock{
//			CreateAirportFunc: func(ctx context.Context, request *dto.Airport) (*dto.Airport, error) {
//				panic("mock out the CreateAirport method")
//			},
//			DeleteAirportFunc: func(ctx context.Context, id int) error {
//				panic("mock out the DeleteAirport method")
//			},
//			FetchAirportDataFunc: func(icaos string) (*dto.AirportDataResponse, error) {
//				panic("mock out the FetchAirportData method")
//			},
//			GetAirportFunc: func(ctx context.Context, id int) (*dto.Airport, error) {
//				panic("mock out the GetAirport method")
//			},
//			GetAllAirportFunc: func(ctx context.Context, limit int, offset int) ([]dto.Airport, error) {
//				panic("mock out the GetAllAirport method")
//			},
//			SearchAirportFunc: func(ctx context.Context, icao string, name string, limit int, offset int) ([]dto.Airport, error) {
//				panic("mock out the SearchAirport method")
//			},
//			UpdateAirportFunc: func(ctx context.Context, request *dto.Airport) (*dto.Airport, error) {
//				panic("mock out the UpdateAirport method")
//			},
//		}
//
//		// use mockedIAirportService in code that requires service.IAirportService
//		// and then make assertions.
//
//	}
type IAirportServiceMock struct {
	// CreateAirportFunc mocks the CreateAirport method.
	CreateAirportFunc func(ctx context.Context, request *dto.Airport) (*dto.Airport, error)

	// DeleteAirportFunc mocks the DeleteAirport method.
	DeleteAirportFunc func(ctx context.Context, id int) error

	// FetchAirportDataFunc mocks the FetchAirportData method.
	FetchAirportDataFunc func(icaos string) (*dto.AirportDataResponse, error)

	// GetAirportFunc mocks the GetAirport method.
	GetAirportFunc func(ctx context.Context, id int) (*dto.Airport, error)

	// GetAllAirportFunc mocks the GetAllAirport method.
	GetAllAirportFunc func(ctx context.Context, limit int, offset int) ([]dto.Airport, error)

	// SearchAirportFunc mocks the SearchAirport method.
	SearchAirportFunc func(ctx context.Context, icao string, name string, limit int, offset int) ([]dto.Airport, error)

	// UpdateAirportFunc mocks the UpdateAirport method.
	UpdateAirportFunc func(ctx context.Context, request *dto.Airport) (*dto.Airport, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAirport holds details about calls to the CreateAirport method.
		CreateAirport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *dto.Airport
		}
		// DeleteAirport holds details about calls to the DeleteAirport method.
		DeleteAirport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// FetchAirportData holds details about calls to the FetchAirportData method.
		FetchAirportData []struct {
			// Icaos is the icaos argument value.
			Icaos string
		}
		// GetAirport holds details about calls to the GetAirport method.
		GetAirport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetAllAirport holds details about calls to the GetAllAirport method.
		GetAllAirport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// SearchAirport holds details about calls to the SearchAirport method.
		SearchAirport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Icao is the icao argument value.
			Icao string
			// Name is the name argument value.
			Name string
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// UpdateAirport holds details about calls to the UpdateAirport method.
		UpdateAirport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *dto.Airport
		}
	}
	lockCreateAirport    sync.RWMutex
	lockDeleteAirport    sync.RWMutex
	lockFetchAirportData sync.RWMutex
	lockGetAirport       sync.RWMutex
	lockGetAllAirport    sync.RWMutex
	lockSearchAirport    sync.RWMutex
	lockUpdateAirport    sync.RWMutex
}

// CreateAirport calls CreateAirportFunc.
func (mock *IAirportServiceMock) CreateAirport(ctx context.Context, request *dto.Airport) (*dto.Airport, error) {
	if mock.CreateAirportFunc == nil {
		panic("IAirportServiceMock.CreateAirportFunc: method is nil but IAirportService.CreateAirport was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *dto.Airport
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockCreateAirport.Lock()
	mock.calls.CreateAirport = append(mock.calls.CreateAirport, callInfo)
	mock.lockCreateAirport.Unlock()
	return mock.CreateAirportFunc(ctx, request)
}

// CreateAirportCalls gets all the calls that were made to CreateAirport.
// Check the length with:
//
//	len(mockedIAirportService.CreateAirportCalls())
func (mock *IAirportServiceMock) CreateAirportCalls() []struct {
	Ctx     context.Context
	Request *dto.Airport
} {
	var calls []struct {
		Ctx     context.Context
		Request *dto.Airport
	}
	mock.lockCreateAirport.RLock()
	calls = mock.calls.CreateAirport
	mock.lockCreateAirport.RUnlock()
	return calls
}

// DeleteAirport calls DeleteAirportFunc.
func (mock *IAirportServiceMock) DeleteAirport(ctx context.Context, id int) error {
	if mock.DeleteAirportFunc == nil {
		panic("IAirportServiceMock.DeleteAirportFunc: method is nil but IAirportService.DeleteAirport was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAirport.Lock()
	mock.calls.DeleteAirport = append(mock.calls.DeleteAirport, callInfo)
	mock.lockDeleteAirport.Unlock()
	return mock.DeleteAirportFunc(ctx, id)
}

// DeleteAirportCalls gets all the calls that were made to DeleteAirport.
// Check the length with:
//
//	len(mockedIAirportService.DeleteAirportCalls())
func (mock *IAirportServiceMock) DeleteAirportCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockDeleteAirport.RLock()
	calls = mock.calls.DeleteAirport
	mock.lockDeleteAirport.RUnlock()
	return calls
}

// FetchAirportData calls FetchAirportDataFunc.
func (mock *IAirportServiceMock) FetchAirportData(icaos string) (*dto.AirportDataResponse, error) {
	if mock.FetchAirportDataFunc == nil {
		panic("IAirportServiceMock.FetchAirportDataFunc: method is nil but IAirportService.FetchAirportData was just called")
	}
	callInfo := struct {
		Icaos string
	}{
		Icaos: icaos,
	}
	mock.lockFetchAirportData.Lock()
	mock.calls.FetchAirportData = append(mock.calls.FetchAirportData, callInfo)
	mock.lockFetchAirportData.Unlock()
	return mock.FetchAirportDataFunc(icaos)
}

// FetchAirportDataCalls gets all the calls that were made to FetchAirportData.
// Check the length with:
//
//	len(mockedIAirportService.FetchAirportDataCalls())
func (mock *IAirportServiceMock) FetchAirportDataCalls() []struct {
	Icaos string
} {
	var calls []struct {
		Icaos string
	}
	mock.lockFetchAirportData.RLock()
	calls = mock.calls.FetchAirportData
	mock.lockFetchAirportData.RUnlock()
	return calls
}

// GetAirport calls GetAirportFunc.
func (mock *IAirportServiceMock) GetAirport(ctx context.Context, id int) (*dto.Airport, error) {
	if mock.GetAirportFunc == nil {
		panic("IAirportServiceMock.GetAirportFunc: method is nil but IAirportService.GetAirport was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAirport.Lock()
	mock.calls.GetAirport = append(mock.calls.GetAirport, callInfo)
	mock.lockGetAirport.Unlock()
	return mock.GetAirportFunc(ctx, id)
}

// GetAirportCalls gets all the calls that were made to GetAirport.
// Check the length with:
//
//	len(mockedIAirportService.GetAirportCalls())
func (mock *IAirportServiceMock) GetAirportCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetAirport.RLock()
	calls = mock.calls.GetAirport
	mock.lockGetAirport.RUnlock()
	return calls
}

// GetAllAirport calls GetAllAirportFunc.
func (mock *IAirportServiceMock) GetAllAirport(ctx context.Context, limit int, offset int) ([]dto.Airport, error) {
	if mock.GetAllAirportFunc == nil {
		panic("IAirportServiceMock.GetAllAirportFunc: method is nil but IAirportService.GetAllAirport was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetAllAirport.Lock()
	mock.calls.GetAllAirport = append(mock.calls.GetAllAirport, callInfo)
	mock.lockGetAllAirport.Unlock()
	return mock.GetAllAirportFunc(ctx, limit, offset)
}

// GetAllAirportCalls gets all the calls that were made to GetAllAirport.
// Check the length with:
//
//	len(mockedIAirportService.GetAllAirportCalls())
func (mock *IAirportServiceMock) GetAllAirportCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetAllAirport.RLock()
	calls = mock.calls.GetAllAirport
	mock.lockGetAllAirport.RUnlock()
	return calls
}

// SearchAirport calls SearchAirportFunc.
func (mock *IAirportServiceMock) SearchAirport(ctx context.Context, icao string, name string, limit int, offset int) ([]dto.Airport, error) {
	if mock.SearchAirportFunc == nil {
		panic("IAirportServiceMock.SearchAirportFunc: method is nil but IAirportService.SearchAirport was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Icao   string
		Name   string
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Icao:   icao,
		Name:   name,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockSearchAirport.Lock()
	mock.calls.SearchAirport = append(mock.calls.SearchAirport, callInfo)
	mock.lockSearchAirport.Unlock()
	return mock.SearchAirportFunc(ctx, icao, name, limit, offset)
}

// SearchAirportCalls gets all the calls that were made to SearchAirport.
// Check the length with:
//
//	len(mockedIAirportService.SearchAirportCalls())
func (mock *IAirportServiceMock) SearchAirportCalls() []struct {
	Ctx    context.Context
	Icao   string
	Name   string
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Icao   string
		Name   string
		Limit  int
		Offset int
	}
	mock.lockSearchAirport.RLock()
	calls = mock.calls.SearchAirport
	mock.lockSearchAirport.RUnlock()
	return calls
}

// UpdateAirport calls UpdateAirportFunc.
func (mock *IAirportServiceMock) UpdateAirport(ctx context.Context, request *dto.Airport) (*dto.Airport, error) {
	if mock.UpdateAirportFunc == nil {
		panic("IAirportServiceMock.UpdateAirportFunc: method is nil but IAirportService.UpdateAirport was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *dto.Airport
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockUpdateAirport.Lock()
	mock.calls.UpdateAirport = append(mock.calls.UpdateAirport, callInfo)
	mock.lockUpdateAirport.Unlock()
	return mock.UpdateAirportFunc(ctx, request)
}

// UpdateAirportCalls gets all the calls that were made to UpdateAirport.
// Check the length with:
//
//	len(mockedIAirportService.UpdateAirportCalls())
func (mock *IAirportServiceMock) UpdateAirportCalls() []struct {
	Ctx     context.Context
	Request *dto.Airport
} {
	var calls []struct {
		Ctx     context.Context
		Request *dto.Airport
	}
	mock.lockUpdateAirport.RLock()
	calls = mock.calls.UpdateAirport
	mock.lockUpdateAirport.RUnlock()
	return calls
}
